// @generated by protoc-gen-es v2.4.0
// @generated from file data.proto (package websocket, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file data.proto.
 */
export declare const file_data: GenFile;

/**
 * @generated from message websocket.WebSocketMessage
 */
export declare type WebSocketMessage = Message<"websocket.WebSocketMessage"> & {
  /**
   * @generated from oneof websocket.WebSocketMessage.kind
   */
  kind: {
    /**
     * @generated from field: websocket.ConnectedUsers connected_users = 1;
     */
    value: ConnectedUsers;
    case: "connectedUsers";
  } | {
    /**
     * @generated from field: websocket.Initialize initialize = 2;
     */
    value: Initialize;
    case: "initialize";
  } | {
    /**
     * @generated from field: websocket.InitializeDone initialize_done = 3;
     */
    value: InitializeDone;
    case: "initializeDone";
  } | {
    /**
     * @generated from field: websocket.InferenceRequest inference_request = 4;
     */
    value: InferenceRequest;
    case: "inferenceRequest";
  } | {
    /**
     * @generated from field: websocket.Computation computation = 5;
     */
    value: Computation;
    case: "computation";
  } | {
    /**
     * @generated from field: websocket.InferenceResult inference_result = 6;
     */
    value: InferenceResult;
    case: "inferenceResult";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message websocket.WebSocketMessage.
 * Use `create(WebSocketMessageSchema)` to create a new message.
 */
export declare const WebSocketMessageSchema: GenMessage<WebSocketMessage>;

/**
 * @generated from message websocket.ConnectedUsers
 */
export declare type ConnectedUsers = Message<"websocket.ConnectedUsers"> & {
  /**
   * @generated from field: uint32 message = 1;
   */
  message: number;
};

/**
 * Describes the message websocket.ConnectedUsers.
 * Use `create(ConnectedUsersSchema)` to create a new message.
 */
export declare const ConnectedUsersSchema: GenMessage<ConnectedUsers>;

/**
 * @generated from message websocket.Initialize
 */
export declare type Initialize = Message<"websocket.Initialize"> & {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * @generated from field: websocket.ModelConfig message = 2;
   */
  message?: ModelConfig;
};

/**
 * Describes the message websocket.Initialize.
 * Use `create(InitializeSchema)` to create a new message.
 */
export declare const InitializeSchema: GenMessage<Initialize>;

/**
 * @generated from message websocket.InitializeDone
 */
export declare type InitializeDone = Message<"websocket.InitializeDone"> & {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId: string;
};

/**
 * Describes the message websocket.InitializeDone.
 * Use `create(InitializeDoneSchema)` to create a new message.
 */
export declare const InitializeDoneSchema: GenMessage<InitializeDone>;

/**
 * @generated from message websocket.InferenceRequest
 */
export declare type InferenceRequest = Message<"websocket.InferenceRequest"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message websocket.InferenceRequest.
 * Use `create(InferenceRequestSchema)` to create a new message.
 */
export declare const InferenceRequestSchema: GenMessage<InferenceRequest>;

/**
 * @generated from message websocket.Computation
 */
export declare type Computation = Message<"websocket.Computation"> & {
  /**
   * @generated from field: websocket.ComputationMessage message = 1;
   */
  message?: ComputationMessage;
};

/**
 * Describes the message websocket.Computation.
 * Use `create(ComputationSchema)` to create a new message.
 */
export declare const ComputationSchema: GenMessage<Computation>;

/**
 * @generated from message websocket.InferenceResult
 */
export declare type InferenceResult = Message<"websocket.InferenceResult"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message websocket.InferenceResult.
 * Use `create(InferenceResultSchema)` to create a new message.
 */
export declare const InferenceResultSchema: GenMessage<InferenceResult>;

/**
 * @generated from message websocket.ModelConfig
 */
export declare type ModelConfig = Message<"websocket.ModelConfig"> & {
  /**
   * @generated from field: string model_uri = 1;
   */
  modelUri: string;

  /**
   * @generated from field: repeated websocket.ExternalDataEntry external_data = 2;
   */
  externalData: ExternalDataEntry[];
};

/**
 * Describes the message websocket.ModelConfig.
 * Use `create(ModelConfigSchema)` to create a new message.
 */
export declare const ModelConfigSchema: GenMessage<ModelConfig>;

/**
 * @generated from message websocket.ComputationMessage
 */
export declare type ComputationMessage = Message<"websocket.ComputationMessage"> & {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * @generated from oneof websocket.ComputationMessage.data
   */
  data: {
    /**
     * @generated from field: websocket.FirstModelInput first = 3;
     */
    value: FirstModelInput;
    case: "first";
  } | {
    /**
     * @generated from field: websocket.IntermediateModelData intermediate = 4;
     */
    value: IntermediateModelData;
    case: "intermediate";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message websocket.ComputationMessage.
 * Use `create(ComputationMessageSchema)` to create a new message.
 */
export declare const ComputationMessageSchema: GenMessage<ComputationMessage>;

/**
 * @generated from message websocket.ExternalDataEntry
 */
export declare type ExternalDataEntry = Message<"websocket.ExternalDataEntry"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string data = 2;
   */
  data: string;
};

/**
 * Describes the message websocket.ExternalDataEntry.
 * Use `create(ExternalDataEntrySchema)` to create a new message.
 */
export declare const ExternalDataEntrySchema: GenMessage<ExternalDataEntry>;

/**
 * @generated from message websocket.FirstModelInput
 */
export declare type FirstModelInput = Message<"websocket.FirstModelInput"> & {
  /**
   * @generated from field: repeated uint32 input_ids = 1;
   */
  inputIds: number[];
};

/**
 * Describes the message websocket.FirstModelInput.
 * Use `create(FirstModelInputSchema)` to create a new message.
 */
export declare const FirstModelInputSchema: GenMessage<FirstModelInput>;

/**
 * @generated from message websocket.IntermediateModelData
 */
export declare type IntermediateModelData = Message<"websocket.IntermediateModelData"> & {
  /**
   * @generated from field: map<string, websocket.IntermediateResult> map = 1;
   */
  map: { [key: string]: IntermediateResult };
};

/**
 * Describes the message websocket.IntermediateModelData.
 * Use `create(IntermediateModelDataSchema)` to create a new message.
 */
export declare const IntermediateModelDataSchema: GenMessage<IntermediateModelData>;

/**
 * @generated from message websocket.IntermediateResult
 */
export declare type IntermediateResult = Message<"websocket.IntermediateResult"> & {
  /**
   * @generated from field: repeated float data = 1;
   */
  data: number[];

  /**
   * @generated from field: repeated uint32 dims = 2;
   */
  dims: number[];
};

/**
 * Describes the message websocket.IntermediateResult.
 * Use `create(IntermediateResultSchema)` to create a new message.
 */
export declare const IntermediateResultSchema: GenMessage<IntermediateResult>;

